---
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: workspace
spec:
  triggers:
    - binding:
        name: simple-binding
      template:
        name: trigger-workspace
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: simple-binding
---
apiVersion: tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: trigger-workspace
spec:
  resourcetemplates:
    - # PVC
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: tekton-catalog-$(uid)-pvc
      spec:
        resources:
          requests:
            storage:  1Gi
        volumeMode: Filesystem
        accessModes:
          - ReadWriteOnce
    - # Service Account
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: build-bot
    - # Pipeline run
      apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        name: tekton-catalog-$(uid)
      spec:
        serviceAccountName: build-bot
        pipelineRef:
          name: ci-pipeline
        workspaces:
          - name: shared-data
            persistentVolumeClaim:
              claimName: tekton-catalog-$(uid)-pvc
          - name: pipeline-secrets
            secret:
              secretName: secure-properties
# ---
# apiVersion: tekton.dev/v1beta1
# kind: Pipeline
# metadata:
#   name: ci-pipeline
# spec:
#   params:
#     - name: repository
#       description: the git repo
#     - name: branch
#       description: branch
#     - name: revision
#       description: the git revision/commit for the git repo
#       default: ""
#     - name: pipeline-debug
#       description: toggles debug mode for the pipeline
#     - name: project-id
#       description: project id
#       default: ""
#     - name: tf-dir
#       description: the directory where the terraform main entry file is found
#       default: ""
#     - name: policy-config-json
#       description: Configure policies to control thresholds
#       default: ""
#     - name: tf-var-file
#       description: (optional) terraform var-file
#       default: ""
#   workspaces:
#     - name: artifacts

#   tasks:
#     - name: extract-repository-url
#       taskRef:
#         name: toolchain-extract-value
#       params:
#         - name: expression
#           # if a params.repository is given, it takes precedence
#           value: '. as $toolchain | ["$(params.repository)"] | if .[0]=="" then $toolchain | .services[] | select(.toolchain_binding.name=="repo") | .dashboard_url else .[0] end'
#         - name: pipeline-debug
#           value: $(params.pipeline-debug)
#     - name: cra-fetch-repo
#       taskRef:
#         name: git-clone-repo
#       params:
#         - name: continuous-delivery-context-secret
#           value: "secure-properties"
#         - name: ibmcloud-apikey-secret-key
#           value: "apikey"
#         - name: repository
#           value: $(tasks.extract-repository-url.results.extracted-value)
#         - name: branch
#           value: $(params.branch)
#         - name: revision
#           value: $(params.revision)
#         - name: pipeline-debug
#           value: $(params.pipeline-debug)
#       workspaces:
#         - name: output
#           workspace: artifacts
#     - name: cra-terraform-scan
#       when:
#         - input: "$(params.tf-dir)"
#           operator: notin
#           values: [""]
#       runAfter:
#         - cra-fetch-repo
#       taskRef:
#         name: cra-terraform-scan
#       workspaces:
#         - name: artifacts
#           workspace: artifacts
#         - name: secrets
#           workspace: artifacts
#       params:
#         - name: repository
#           value: $(tasks.extract-repository-url.results.extracted-value)
#         - name: branch
#           value: $(params.branch)
#         - name: scm-type
#           value: $(params.scm-type)
#         - name: project-id
#           value: $(params.project-id)
#         - name: directory-name
#           value: ""
#         - name: pipeline-debug
#           value: $(params.pipeline-debug)
#         - name: tf-dir
#           value: $(params.tf-dir)
#         - name: policy-config-json
#           value: $(params.policy-config-json)
#         - name: tf-var-file
#           value: $(params.tf-var-file)     


---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-pipeline
spec:
  workspaces:
  - name: shared-data
  - name: pipeline-secrets
  tasks:
#   - name: extract-repository-url
#       taskRef:
#         name: toolchain-extract-value
#       params:
#         - name: expression
#           value: '. as $toolchain | ["$(params.repository)"] | if .[0]=="" then $toolchain | .services[] | select(.toolchain_binding.name=="repo") | .dashboard_url else .[0] end'
#         - name: pipeline-debug
#           value: $(params.pipeline-debug)
  - name: clone-patterns-repo
    workspaces:
    - name: artifacts
      workspace: shared-data
    taskRef:
      name: clone-patterns-repo
  - name: cra-terraform-scan
    workspaces:
    - name: artifacts
      workspace: shared-data
    - name: secrets
      workspace: pipeline-secrets
    taskRef:
      name: cra-terraform-scan
    params:
      - name: repository
        description: the git repo containing source code. If empty, the repository url will be found from toolchain
        default: ""
      - name: branch
        value: testslz
      - name: tf-dir
        value: terraform/templates/pattern-vpc-roks/
      - name: directory-name
        value: accelerate
      - name: pipeline-debug
        value: "1"
    runAfter:
    - clone-patterns-repo
      
     
